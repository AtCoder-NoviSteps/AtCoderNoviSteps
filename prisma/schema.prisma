// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// See:
// https://www.prisma.io/docs/concepts/components/prisma-schema/generators
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

// See:
// https://dev.classmethod.jp/articles/prisma_er_diagram_auto_generation/
generator erd {
  provider                  = "prisma-erd-generator"
  theme                     = "forest"
  output                    = "ERD.md"
  includeRelationFromFields = true
}

// See:
// https://github.com/Quramy/prisma-fabbrica
generator fabbrica {
  provider    = "prisma-fabbrica"
  output      = ".fabbrica"
  noTranspile = true // 2024年5月末時点の最新版(v2.3.1)でトランスパイルエラーが発生するため、やむを得ず指定
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Note: Lucia v3 + v3 Prisma adaperでは、全てのフィールドがキャメルケースであることが要求されている。
//       段階的に移行を進めるため、modelを追加・修正する場合は、キャメルケースで記述する。
// See:
// https://lucia-auth.com/upgrade-v3/prisma/postgresql

// See:
// https://lucia-auth.com/database-adapters/prisma/
model User {
  id                        String   @id @unique
  // here you can add custom fields for your user
  // e.g. name, email, username, roles, etc.
  username                  String   @unique
  role                      Roles    @default(USER)
  atcoder_validation_code   String   @default("")
  atcoder_username          String   @default("")
  atcoder_validation_status Boolean? @default(false)
  created_at                DateTime @default(now())
  updated_at                DateTime @updatedAt

  auth_session Session[]
  key          Key[]
  taskAnswer   TaskAnswer[]
  workBooks    WorkBook[]

  @@map("user")
}

// See:
// https://www.prisma.io/docs/concepts/components/prisma-schema/data-model#defining-enums
enum Roles {
  ADMIN
  USER
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt

  user User @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("session")
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String

  user User @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("key")
}

model Task {
  id                          String                    @id @unique
  contest_type                ContestType               @default(ABC)
  contest_id                  String
  task_table_index            String // 問題一覧を表示するときに使用。AtCoder Problemsに準拠。
  task_id                     String                    @unique
  title                       String
  grade                       TaskGrade                 @default(PENDING)
  atcoder_problems_difficulty AtcoderProblemsDifficulty @default(PENDING)
  created_at                  DateTime                  @default(now())
  updated_at                  DateTime                  @updatedAt

  tags          TaskTag[]
  task_answers  TaskAnswer[]
  workBookTasks WorkBookTask[]

  @@map("task")
}

model Tag {
  id           String   @id @unique
  is_published Boolean  @default(false)
  is_official  Boolean
  name         String   @unique
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  tasks TaskTag[]

  @@map("tag")
}

model TaskTag {
  id         String
  task_id    String
  tag_id     String
  priority   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  task Task? @relation(fields: [task_id], references: [task_id])
  tag  Tag?  @relation(fields: [tag_id], references: [id])

  @@id([task_id, tag_id])
  @@map("tasktag")
}

// See:
// https://www.prisma.io/docs/orm/more/upgrade-guides/upgrading-versions/upgrading-to-prisma-3/referential-actions
model TaskAnswer {
  id         String   @unique
  task_id    String
  user_id    String
  status_id  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  task   Task?             @relation(fields: [task_id], references: [task_id])
  user   User?             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  status SubmissionStatus? @relation(fields: [status_id], references: [id])

  @@id([task_id, user_id])
  @@unique([task_id, user_id])
  @@map("taskanswer")
}

model SubmissionStatus {
  id           String  @id @unique
  user_id      String?
  status_name  String
  is_AC        Boolean @default(false)
  label_name   String
  image_path   String
  button_color String
  sort_order   Int     @default(10)

  task_answer TaskAnswer[]

  @@map("submissionstatus")
}

model WorkBook {
  id            Int          @id @default(autoincrement())
  authorId      String
  title         String
  description   String       @default("")
  editorialUrl  String       @default("") // カリキュラムのトピック解説用のURL。HACK: 「ユーザ作成」の場合も利用できるようにするかは要検討。
  isPublished   Boolean      @default(false)
  isOfficial    Boolean      @default(false)
  isReplenished Boolean      @default(false) // カリキュラムの【補充】を識別するために使用
  workBookType  WorkBookType @default(CREATED_BY_USER)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  user User @relation(references: [id], fields: [authorId])

  workBookTasks WorkBookTask[]

  @@map("workbook")
}

model WorkBookTask {
  id         String   @id @default(uuid())
  workBookId Int
  taskId     String
  priority   Int // 1以上。1に近いほど優先度が高い
  comment    String   @default("") // 一言。問題を解く上での注意点・ヒントなどを記載
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  workBook WorkBook @relation(references: [id], fields: [workBookId], onDelete: Cascade)
  task     Task     @relation(references: [task_id], fields: [taskId])

  @@map("workbooktask")
}

enum ContestType {
  ABC // AtCoder Beginner Contest
  APG4B // C++入門 AtCoder Programming Guide for beginners
  ABS // AtCoder Beginners Selection
  ACL_PRACTICE // AtCoder Library Practice Contest
  PAST // Practical Algorithm Skill Test (アルゴリズム実技検定)
  EDPC // Educational DP Contest / DP まとめコンテスト
  TDPC // Typical DP Contest
  JOI // Japanese Olympiad in Informatics
  TYPICAL90 // 競プロ典型 90 問
  TESSOKU_BOOK // 競技プログラミングの鉄則
  MATH_AND_ALGORITHM // アルゴリズムと数学
  ARC // AtCoder Regular Contest
  AGC // AtCoder Grand Contest
  ABC_LIKE // AtCoder Beginner Contest (ABC) 相当のコンテスト
  ARC_LIKE // AtCoder Regular Contest (ARC) 相当のコンテスト
  AGC_LIKE // AtCoder Grand Contest (AGC) 相当のコンテスト
  UNIVERSITY // University Programming Contests in AtCoder (e.g., UTPC)
  OTHERS // AtCoder (その他)
  AOJ_COURSES // AIZU ONLINE JUDGE Courses
  AOJ_PCK // All-Japan High School Programming Contest (PCK)
  AOJ_JAG // ACM-ICPC Japan Alumni Group Contest (JAG)
}

// 11Q(最も簡単)〜6D(最難関)。
// 注: 基準は非公開。
enum TaskGrade {
  PENDING // 未確定
  Q11 // 11Qのように表記したいが、数字を最初の文字として利用できないため
  Q10
  Q9
  Q8
  Q7
  Q6
  Q5
  Q4
  Q3
  Q2
  Q1
  D1
  D2
  D3
  D4
  D5
  D6
}

enum AtcoderProblemsDifficulty {
  PENDING // 未確定
  UNAVAILABLE
  GRAY
  BROWN
  GREEN
  CYAN
  BLUE
  YELLOW
  ORANGE
  RED
  BRONZE
  SILVER
  GOLD
}

enum WorkBookType {
  CREATED_BY_USER // (デフォルト) ユーザ作成: サービスの利用者がさまざまなコンセプトで作成
  CURRICULUM // カリキュラム: 例題の解法を理解すれば、その本質部分を真似することで解ける類題
  SOLUTION // 解法別: 使い方をマスターしたいアルゴリズム・データ構造・考え方・実装方針 (総称して解法と表記) をさまざまなパターンで考察しながら練習できる
  TEXTBOOK // (Deprecated) 旧 教科書: 表記を「カリキュラム」に変更したため廃止予定
  GENRE // (Deprecated) ジャンル別: 考察なしで問題文から読み取れる内容に基づいてまとめている。ネタバレなし
  THEME // (Deprecated) テーマ別: さまざまな解法 (解法別より狭義) を横断し得るものをまとめている
  OTHERS // (Deprecated) 上記以外
}
